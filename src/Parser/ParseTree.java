/** Concrete Parse Tree
 * 
 * Generated by parser, to be transformed into AST.
 * */

package Parser;

import Scanner.Token;

public interface ParseTree {
    ParseTree[] getChildren();
    void setChildren(ParseTree... newChildren);
    void visit(Visitor v);
    public interface Visitor {
        void visit(Token t); // Terminal node
        void visit(String rule, ParseTree... children); // Non-Terminal
    }
}

abstract class AParseTree implements ParseTree {
    ParseTree[] children;
    public ParseTree[] getChildren() { return children; }
    public void setChildren(ParseTree... newChildren) { children = newChildren; }
    protected AParseTree(ParseTree... children) { this.children = children; }
}

class Terminal extends AParseTree {
    public final Token token;
    public Terminal(Token t, ParseTree... children) { super(children); token = t; }
    @Override public void visit(Visitor v) {
        v.visit(token);
    }
}

class NonTerminal extends AParseTree {
    public final String rule;
    public NonTerminal(String rule, ParseTree... children) {
        super(children);
        this.rule = rule;
    }
    @Override public void visit(Visitor v) {
        v.visit(rule, children);
    }
}
