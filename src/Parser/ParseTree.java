/** Concrete Parse Tree
 * 
 * Generated by parser, to be transformed into AST.
 * */

package Parser;

import Scanner.Token;

public interface ParseTree {
    ParseTree[] getChildren();
    public ParseTree getParent();
    public void setParent(ParseTree parent);
    public int numChildren();
    void setChildren(ParseTree... newChildren);
    void visit(Visitor v) throws ParseException;
    public String getRuleString();
    public String getSymbol();
    public boolean isTerminal();
    public Token getToken();
    public interface Visitor {
    	void visit(Token t) throws ParseException; // Terminal node
        void visit(String lhs, ParseTree... children) throws ParseException; // Non-Terminal
    }
}

abstract class AParseTree implements ParseTree {
    ParseTree[] children;
    ParseTree parent;
    public ParseTree getParent() {
    	return this.parent;
    }
    public void setParent(ParseTree parent) {
    	this.parent = parent;
    }
    public ParseTree[] getChildren() { return children; }
    public void setChildren(ParseTree... newChildren) {
    	for (ParseTree child : newChildren) {
    		child.setParent(this);
    	}
    	this.children = newChildren;
    }
    protected AParseTree(ParseTree... children) {
    	this.setChildren(children);
    }
    public int numChildren() {
    	return children.length;
    }
    
    public String getRuleString() {
    	String s = getSymbol();
    	for (ParseTree child : children) {
    		s += " " + child.getSymbol();
    	}
    	return s;
    }
}

class Terminal extends AParseTree {
    public final Token token;
    ParseTree parent;
    public Terminal(Token t) {
    	token = t;
    	}
    @Override public void visit(Visitor v) throws ParseException {
        v.visit(token);
    }
    public String getSymbol() {
        return token.getCfgName();
    }
    
    public boolean isTerminal(){
    	return true;
    }
    
    public Token getToken(){
    	return token;
    }
}

class NonTerminal extends AParseTree {
    public final String lhs;
    public NonTerminal(String lhs, ParseTree... children) {
        super(children);
        this.lhs = lhs;
    }
    @Override public void visit(Visitor v) throws ParseException {
        v.visit(lhs, children);
    }
    public String getSymbol() {
        return lhs;
    }
    
    public boolean isTerminal(){
    	return false;
    }
    
    public Token getToken(){
    	// Walk down the left spine.
    	if (this.children.length == 0) {
    		// Should never happen.
    		return null;
    	} 
    	return this.children[0].getToken();
    }
}
